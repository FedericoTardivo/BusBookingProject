  openapi: 3.0.0
  info:
    version: 1.0.0
    title: Bus booking API
    description: API per interfacciarsi con il servizio di prenotazione degli autobus creato dal gruppo \#32 per il progetto di Ingegneria del Software 2 della laurea triennale in Informatica (UniTN)
    
  servers:
    - url: https://busbooking-ingsoft2.herokuapp.com/api/v1

  paths:
    /lines:
      get:
        description: Restituisce la lista delle fermate del servizio di trasporti specificato
        parameters:
          - name: companyId
            required: true
            in: query
            description: ID della compagnia di trasporti per la quale si vogliono ottenere le linee
            schema:
              type: integer
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
      post:
        description: Crea una nuova linea
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Line'
        responses:
          '201':
            description: Linea inserita correttamente
            content: 
              application/json:
                schema:
                  $ref: '#/components/schemas/LineSelf' 
  
          '400':
            $ref: '#/components/responses/400BadRequest'
          
          '409':
            description: Linea già esistente
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LineError'

    /users:
      post:
        description: Crea un nuovo account passeggero
        requestBody:
          required: true
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    required:
                      - password
                      - confirmPassword
                    properties:
                      password:
                        type: string
                        example: "MySuperSecretPassword"
                      confirmPassword:
                        type: string
                        example: "MySuperSecretPassword"
        responses:
          '201':
            description: Account creato con successo
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserSelf'
            headers:
              Location:
                schema:
                  type: string
                description: Link per ottenere l'account appena creato
          
          '400':
            $ref: '#/components/responses/400BadRequest'
            
          '409':
            description: Email già registrata
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FieldError'
                example:
                  fieldName: email
                  fieldMessage: L'email "mario.rossi@domain.com" è già registrata

    /authentication:
      post:
        description: esegue il login differenziando User "normali" ed Admin
        requestBody:
          required: true
          content:
            application/json:
              schema:
               allOf:
                - $ref: '#/components/schemas/AuthenticationUser'
                - type: object
          
        responses:
          '201':
            description: Account loggato con successo
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AuthenticationUser'
            
          '400':
            $ref: '#/components/responses/400BadRequest'

          '401':
            $ref: '#/components/responses/401Unauthorized'

    /users/{id}/tickets:
      get:
        description: Ottiene un elenco di tutti i biglietti acquistati dall'utente
        parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID dell'utente
        - in: query
          name: offset
          schema:
            type: integer
          description: Numero di biglietti da saltare prima di iniziare a raccogliere gli elementi. Usato per la paginazione dei risultati
        - in: query
          name: limit
          schema:
            type: integer
          description: Numero di biglietti da restituire. Usato per la paginazione dei risultati
        - in: query
          name: issue_start
          schema:
            type: string
            format: date
          description: Data di inizio dell'intervallo ricercato per la data di emissione dei biglietti. Usato per il filtraggio dei dati
        - in: query
          name: issue_end
          schema:
            type: string
            format: date
          description: Data di fine dell'intervallo ricercato per la data di emissione dei biglietti. Usato per il filtraggio dei dati
        - in: query
          name: lineId
          schema:
            type: string
          description: ID della linea dei biglietti da restituire. Usato per il filtraggio dei dati
        - in: query
          name: start_stop
          schema:
            type: string
          description: Fermata di salita dei biglietti da restituire. Usato per il filtraggio dei dati
        - in: query
          name: end_stop
          schema:
            type: string
          description: Fermata di discesa dei biglietti da restituire. Usato per il filtraggio dei dati
        responses:
          '200':
            description: Richiesta avvenuta con successo
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Ticket'

          '400':
            $ref: '#/components/responses/400BadRequest'

          '401':
            $ref: '#/components/responses/401Unauthorized'
            
          '403':
            $ref: '#/components/responses/403Forbidden'

    /tickets:
      post:
        description: Crea un nuovo biglietto
        requestBody:
          required: true
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Ticket'
                  - type: object
                    
        responses:
          '201':
            description: Biglietto creato con successo
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Ticket'

          '400':
            $ref: '#/components/responses/400BadRequest'

          '409':
            description: Biglietto già acquistato
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FieldError'
                example:
                  fieldName: ticket
                  fieldMessage: Questo biglietto è già stato acquistato da questo utente

  components:
    # Data models
    schemas:
      SelfObj:
        type: object
        properties:
          self:
            type: string
            example: /api/v1/object/8452
      
      # Autentication credentials
      AuthenticationUser:
        type: object
        required:
          - email
          - Password
        properties:
          email: 
            type: string
            example: mario.rossi@domain.com
          password:
            type: string
            example: "MySecretSuperPassword"
    
      # Definition of User Type
      User:
        type: object
        required:
          - name
          - surname
          - email
        properties:
          name:
            type: string
            example: Mario
          surname:
            type: string
            example: Rossi
          email:
            type: string
            example: mario.rossi@domain.com

      Ticket:
        type: object
        required:
          - issueDate
          - userId
          - lineId
          - startBusStopId
          - endBusStopId
          - startTime
          - arrivalTime
        properties:
          issueDate:
            type: string
            format: date
            example: "2020-12-31"
          userId:
            type: string
            example: 67676fd-fdhfd6fdd-7f8d6fs
          lineId:
            type : string 
            example: ghdf-4fq4fqrf-dgref34
          startBusStopId:
            type :  string
            example: dfdhf8df6d-dfdf76dfdf-3433fedf
          endBusStopId:
            type : string
            example: dfdhf8df6d-dfdf76dfdf-3433fedf 
          orarioPartenza:
            type : string
            example: 14,30
          orarioArrivo:
            type : string
            example: 14,35 

      UserSelf:
        type: object
        allOf:
          - $ref: '#/components/schemas/SelfObj'
          - $ref: '#/components/schemas/User'
            
      Line:
        type: object
        required:
          - name
          - path
        properties:
          name:
            type: string
          path:
            type: array
            items:
              $ref: '#/components/schemas/BusStopAdd'
          
      LineSelf:
        type: object
        allOf:
          - $ref: '#/components/schemas/SelfObj'
          - $ref: '#/components/schemas/Line'
      
      BusStopAdd:
        type: object
        properties:
          idBusStop:
            type: string
          number:
            type: integer
          times:
            type: array
            items:
              $ref: '#/components/schemas/BusStopTimeOptions'

      BusStopTimeOptions:
        type: object
        properties:
          time:
            type: string
          accessibility:
            type: boolean

      LineError:
        type: object
        properties:
          FieldName:
            type: string
            description: "Nome del campo che ha generato l'errore"
          FieldErrorMessage:
            type: string
            description: "Errore specifico del campo"        
        required:
          - FieldName
          - FieldErrorMessage
        
      # An error message relative to a field
      FieldError:
        type: object
        properties:
          fieldName:
            type: string
            description: "Nome del campo che ha generato l'errore"
          fieldMessage:
            type: string
            description: "Errore specifico del campo"
        required:
          - fieldName
          - fieldMessage
          
    # Responses such as 400 Bad Request
    responses:
      400BadRequest:
        description: Richiesta invalida. Parametri non validi e/o parametri obbligatori mancanti
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Messaggio dell'errore"
                  example: Il campo "email" è obbligatorio 
                fieldsErrors:
                  type: array
                  description: "I campi che hanno generato l'errore con il relativo messaggio"
                  items:
                    $ref: '#/components/schemas/FieldError'
                  example:
                    - fieldName: email
                      fieldMessage: Il campo "email" è obbligatorio
              required:
                - message

      # Unauthorized response
      401Unauthorized:
        description: L'utente non è autenticato.
        content:
          text/plain:
            schema:
              type: string
              example: Utente non autenticato.

      # Forbidden response
      403Forbidden:
        description: L'utente è autenticato ma l'accesso alla risorsa non è autorizzato.
        content:
          text/plain:
            schema:
              type: string
              example: Accesso non autorizzato.